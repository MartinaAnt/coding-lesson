https://naucse.python.cz/2020/praha-jaro-knihovny/sessions/html-css/


# Úvod do HTML
Co je to HTML? Je to anglická zkratka slov **Hypertex Markup Language**, což ve volném překladu znamená
Hypertextový značkovací jazyk. Již z názvu vyplývá, že HTML není programovacím jazykem.
 A co to je vlastně značkovací jazyk? Značkovací jazyk přidává dodatečné informace o prostém textu a&nbsp;jeho formátu.
 Například, když chceme zobrazit **tučný text** nebo *kurzívu*, tak použijeme značky (tagy).
 
 A kde se to HTML používá? Každá internetová stránka je tak napsaná. Zde pozor, dnes již nejsou internetové stránky
  napsané jen v čistém HTML, to bychom se museli vrátit do webového pravěku 90. let.
   Dnes jsou webové stránky tvořené tzv. svatou trojicí: **HTML, CSS a&nbsp;JavaScript**.
    O&nbsp;HTML jsme si už něco pověděli, to tvoří kostru stránky.
    
CSS znamená **Cascading Style Sheets** v překladu *kaskádové styly*, které se starají o to jak stránka bude vypadat
 po grafické stránce.
 
 A co ten JavaScript? JavaScript je další programovací jazyk.
  Možná se zeptáš proč se musím učit JavaScript, když už umím Python.
   Důvody a&nbsp;přesnou historii vám nepovím, ale faktem je, že webové prohlížeče podporují
    z historických důvodů právě JavaScript. JavaScript umožňuje, aby byl web živý. Efekt promáčknutého tlačítka,
     animace, funkce **drag and drop** (tahni a&nbsp;pusť) a&nbsp;další vymoženosti moderního webu.
     
 Konec nudné teorie, jdeme psát weby!!!
 
 ##HTML
 Soubor s příponou ***.html** je obyčejný textový soubor. Otevři si svůj textový editor a&nbsp;do něho napiš:
 
 ```HTML
    Ahoj světe!
```

 Soubor ulož jako `moje_stranka.html` a&nbsp;otevři ho ve svém prohlížeči. Prohlížeč zobrazí, to co jsi napsala.
  Gratuluji, napsala jsi svou první webovou stránku. Že takto stránky nevypadají? Hm...pravda,
   abysme mohli psát stránky jako **[naucse.python.cz](https://naucse.python.cz/)** nebo snad
    **[facebook.com](https://facebook.com/])**, tak musíme přidat více znalosti. Jdeme na to!?
 
 ##Tagy - značky
 Na začátku jsem zmínil, že HTML je značkovací jazyk. Tak kde jsou ty značky?
  Takže obyčejná HTML "ahoj světe stránka" by vypadala asi nějak takto:
  
```HTML
   <!DOCTYPE html>
    <html>
    <body>
        <h1>Ahoj světe</h1>
    </body>
    </html>
```
 
 Takto vypadá webová stránka s minimální strukturou.
  HTML značky (tagy) se zapisují mezi znaménka větší/menší `tag` 
  a&nbsp;většina značek (tagů) musí být ukončena `</tag>`, tak že za znamenéko větší než přidáme **lomeno /**.
  Existují html značky, které nejsou párové a&nbsp;nemusí být ukončený např.: `<br>`, `<a>` atd.
  Obsah webové stránky se píše mezi tagy `<body>` a&nbsp;`</body>`
  
 ##Atributy
 Aby toho nebylo málo, tak každá značka může obsahovat atributy, které význam značky nějakým způsobem modifikují.
  Nejčastěji se setkáme s hypertextovým odkazem:
  
  ```HTML
   <!DOCTYPE html>
    <html>
    <body>
        <h1>Ahoj světe</h1>
        <a href="naucse.python.cz">Nauč se python</a>
    </body>
    </html>
```

Slovo **href** je v tomto případě atribut , který odkazuje na URL adresu.
 Href je anglická zkratka **HyperText Reference**.
 
 ##Hlavička - title
 Jak jsme si před chvilkou řekli, obsah stránky se píše do oblasti **`<body>`**,
  kam se zapisuje vše, co by mělo být vidět. Nicméně webová stránka může obsahovat
   i&nbsp;další potřebné informace např. odkaz na CSS styly, odkaz na JavaScript, název stránky nebo logo,
    které se zobrazuje v panelu. Všechny tyto informace se píší mezi tagy **`<head>`** a&nbsp;**`</head>`**.
    My si ukážeme, jak pojmenovat naší stránku. K tomu slouží tag **`<title>`**:
    
```HTML
<!DOCTYPE html>
<html>
<head>
    <title>Moje první stránka</title>
</head>
<body>
    <h1>Ahoj světe</h1>
    <a href="naucse.python.cz">Nauč se python</a>
</body>
</html>
```

##Odstavec
Základem jakéhokoliv textu je odstavec. Odstavec se zapisuje mezi značky `<p>` a&nbsp;`</p>`.
 Písmeno P pochází z anglického **Paragraph**. Pojďme si do naší stránky přidat odstavec.
 
 ```HTML
<!DOCTYPE html>
<html>
<head>
    <title>Moje první stránka</title>
</head>
<body>
    <h1>Ahoj světe</h1>
    <a href="naucse.python.cz">Nauč se python</a>
    <p>
     Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam ante. Quisque tincidunt scelerisque libero.
     Nulla turpis magna, cursus sit amet, suscipit a, interdum id, felis. Nullam sit amet magna in
     magna gravida vehicula. Fusce consectetuer risus a&nbsp;nunc. Class aptent taciti sociosqu ad litora torquent per
     conubia nostra, per inceptos hymenaeos. Etiam sapien elit, consequat eget, tristique non, venenatis quis, ante.
     Morbi imperdiet, mauris ac auctor dictum, nisl ligula egestas nulla, et sollicitudin sem purus in lacus.
     Aliquam ornare wisi eu metus. Nulla turpis magna, cursus sit amet, suscipit a, interdum id, felis.
     Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam erat volutpat. Donec ipsum massa, ullamcorper in,
     auctor et, scelerisque sed, est. Aliquam in lorem sit amet leo accumsan lacinia. Curabitur ligula sapien,
     pulvinar a&nbsp;vestibulum quis, facilisis vel sapien. In convallis. Donec vitae arcu.
    </p>
</body>
</html>
```
 
 A co ta latina, co je to za blbost? Inu, nějakého líného programátora nebavilo vymýšlet umělé texty,
  když potřeboval otestovat chování své webové stránka,
   a&nbsp;tak napsal generátor náhodných latinských slov. A vzniklo **Lorem ipsum**. Zkus toto slovní spojení vygooglit :-)
   
Pro psaní odstavců se hodí zmínit další značky:
* `<storng> </strong>`**: zvýrazní text **tučně**
* `<em> </em>`: zvýrazní text _kurzívou_

> [warning] Pozor!
> Některé prohlížeče toto pravidlo nerespektují a&nbsp;mohou tyto tagy zobrazovat rozdílně!

* `<br>`: vloží prázdný řádek

A teď si to všechno vyzkoušíme:

 ```HTML
<!DOCTYPE html>
<html>
    <head>
        <title>Moje první stránka</title>
    </head>
    <body>
        <h1>Ahoj světe</h1>
        <a href="naucse.python.cz">Nauč se python</a>
        <p>
            <strong>Tučný text</strong>
            <em>Text kurzívou</em>
            <br>
        </p>
    </body>
</html>
```

##Nadpisy
HTML umožňuje sedm úrovní nadpisů. Největší úroveň nadpisu je **`<h1>`** **`</h1>`** 
a nejnižší **`<h7>`** **`</h7>`**. Vyzkoušej si to.

> [warning] Pozor!
>Možná se ti zdá nadpis h1 moc velký. To nevadí. Pamatuj HTML neřeší grafickou stránku.
> Vždy bys měla dodržet pořadí h1, h2, h3 atd. Grafickou stránku vyřešíš pomocí CSS.

##Seznamy
Seznamy? To už jsem někde viděla? **Pozor** zde se jedná o číslované seznamy nebo odrážky, tak jak je znáš z textových
 editorů. Prosím nepleť si s Pythonem.
 Existují dva nejpouživanější seznamy: číslovaný a&nbsp;nečíslovaný (odrážky).
 
 * Číslovaný seznam **`<ol>`**&nbsp;**`</ol>`** (ordered list):
 
  ```HTML
<!DOCTYPE html>
<html>
    <head>
        <title>Moje první stránka</title>
    </head>
    <body>
        <ol>
            <li>Položka 1</li>
            <li>Položka 2</li>
        </ol>
    </body>
</html>
```

 * Odrážkový seznam **`<ul>`** **`</ul>`** (unordered list):
 
  ```HTML
<!DOCTYPE html>
<html>
    <head>
        <title>Moje první stránka</title>
    </head>
    <body>
        <ul>
            <li>Položka 1</li>
            <li>Položka 2</li>
        </ul>
    </body>
</html>
```

Všimni si, že jednotlivá položka seznamu se v obou případech značí **`<li>`** **`</li>`**.

##Odkazy
Co by to bylo za webové stránky, kdyby neobsahovaly odkazy? Odkaz může směřovat na jinou webovou stránku, a&nbsp;nebo na
 stejnou stránku na určité místo.
 
 * Odkaz na webovou stránku **`<a href="https://naucse.python.cz" >` odkaz `</a>`**
 * Odkaz na umístění v té samé stránce **`<a href="#id">`** odkaz **`</a>`**
 
```HTML
<!DOCTYPE html>
<html>
<head>
    <title>Moje první stránka</title>
</head>
<body>
    <h1 id="nadpis">Nadpis 1</h1>
    <a href="https://naucse.python.cz">Externí odkaz na Nauč se</a>
    <a href="#nadpis">Odkaz na nadpis uvnitř tohoto HTML</a>
</body>
</html>
```

Všimni si, že jsme nadpisu **h1** přidali atribut **id="nadpis"**, čím jsme ho jednoznačně identifikovali a&nbsp;můžeme na
 něj
 v dalším textu odkazovat.
 
 ##Obrázky
 Co by to bylo za web kdybychom nemohli přidávat multimédia, na a&nbsp;nejběžnějším multimediem na webu je obrázek. Značka
  pro přidání obrázku vypadá nějak takto:
  
 ```HTML
<img src="https://www.python.org/static/community_logos/python-logo-master-v3-TM.png" width="120" height="90" alt
="Python logo">
```

Všimni si, že tag **`<img>`** je nepárový a&nbsp;nemusíme ho nijak ukončovat. Stejně jako u&nbsp;hypertextového odkazu mus
íme přidat atribut, který nám udává umístění obrázku. Atribut odkazující na umístění se nazývá **src** z anglického
 source. Dále je dobrou praxí udávat atribut **alt**, který zobrazí textový popisek obrázku pokud se ho nepodaří 
 z nějákého důvodu načíst a&nbsp;nejen to. Nevidomým lidem pomáhají tyto popisky s orientací na stránce. Atribut
  **width** udává šířku obrázku a&nbsp;atribut **height** výšku.
  
> [note]
> **Velikost obrázku**  
> S velikostí obrázků to není vždy jednoduché. Musíte zachovat poměr stran, aby nebyly zdeformované. Velikost okna
> webové stránky se nustále mění. Takže webový vývojář musí řešit dynamickou změnu velikosti obrázku podle velikosti
> okna, tak aby vizuální styl byl stále konzistetní.

##Tabulky
Tabulky byly a&nbsp;stále jsou často zneužíváné k tvorbě rozvržení stránky. Na to tabulky nejsou vhodné a&nbsp;prosím
 vyvaruj
 se toho. Tabulky mají stejný účel jako v textových procesorech, zobrazovat přehledně data a&nbsp;k tomu jsou určeny a&nbsp;k
  ničemu jinému. Samozřejmě tabulky mohou vypadat různě, ale to je záležitost kaskádových stylů (CSS). Ukázka
   tabulky:
   
 ```html
<table>
    <tr>
        <th>Sloupec 1 - nadpis</th>
        <th>Sloupec 2 - nadpis</th>
        <th>Sloupec 3 - nadpis</th>
    </tr>
    <tr>
        <td>Řádek 1, Buňka 1</td>
        <td>Řádek 1, Buňka 2</td>
        <td>Řádek 1, Buňka 3</td>
    </tr>
    <tr>
        <td>Řádek 2, Buňka 1</td>
        <td>Řádek 2, Buňka 2</td>
        <td>Řádek 2, Buňka 3</td>
    </tr>
    <tr>
        <td>Řádek 3, Buňka 1</td>
        <td>Řádek 3, Buňka 2</td>
        <td>Řádek 3, Buňka 3</td>
    </tr>
    <tr>
        <td>Řádek 4, Buňka 1</td>
        <td>Řádek 4, Buňka 2</td>
        <td>Řádek 4, Buňka 3</td>
    </tr>
</table>
```

Nyní si rozklíčujeme použité tagy:
* **`<table>` `<\table>`**: je jen "obal", který vytváří tabulku, ale zatím bez dat
* **`<th>` `<\th>`**: vychází ze slov table heading (nadpis tabulky)
* **`<tr>` `<\tr>`**: vychází ze slov table row (řádek tabulky)
* **`<td>` `<\td>`**: vychází ze slov table data (data tabulky) a&nbsp;definuje jednu buňku v řádku, mezi tento
 tag se zapisují konečná data.
 
##Formuláře
Zde začíná konečně zábava, alespoň pro nás programátory. Ptáte se proč? Přes
 formuláře komunikujeme s našimi uživateli a&nbsp;formuláře jsou prostředek naší komunikace přes které nám uživatele
  poskytují data. Nicméně HTML tyto infromace umí sbírat, ale už je neumí zpracovávat. To je už úkol programovacího
   jazky v našem případu **Pythonu**. Vše si vysvětlíme na příkladu:
 ```html
    <form action="" method="post">
        <p>Jméno:</p>
        <p><input name="name" value="Tvoje jméno"></p>
        
        <label for="fname">Křestní jméno: </label><input type="text" id="fname" name="fname"><br><br>
        <label for="lname">Přijmení: </label><input type="text" id="lname" name="lname"><br><br>

        <p>Komentář: </p>
        <p><textarea rows="10" cols="20" name="comments">Tvůj komentář</textarea></p>

        <p>Tvoje pohlaví:</p>
        <p><input type="radio" name="sex" value="female"> žena</p>
        <p><input type="radio" name="sex" value="male"> muž</p>

        <select name="language">
            <option>Python</option>
            <option>JavaScript</option>
            <option value="third option">C</option>
        </select>

        <p><input type="submit" value="odeslat"></p>
    </form>
```
Zdá se ti to jako zmatek? Zkus kód vložit do editoru a&nbsp;pusť si ho v prohlížeči. Pojďme si vysvětlit jednotlivé tagy:
* `<form action="" method="post"> </form>`: Tento tag definuje celý formulář a&nbsp;veškeré další tagy, které souvisí s
 daným formulářem by měly být uvnitř tohoto tagu. Všimtěte si atributů **action** a&nbsp;**method**.
 * **action**: Zde se zapisuje url adresa, kam se mají odeslat data z formuláře. Ve Flasku je běžné, že adresa je
  prázdný řetězec, což znamená, že se data z formuláře pošlou na stejnou url adresu, kde zrovna jsme.
   Více si ukážeme v lekci o [Flasku](https://naucse.python.cz/2020/praha-jaro-knihovny/intro/flask/).
 * **method**: Určuje HTTP metodu odeslání dat. Pro formuláře existují metody GET a&nbsp;POST.
 
 
* `<input>`: Tag pro vstupní informace. V ukázkové kódu si můžeš všimnout, že tag není samostatně, ale obsahuje 
    další atributy, také je tag nepárový a&nbsp;veškeré informace se vkládají přes atributy. Pojďme se podívat na některé atributy:
    * **name**: Definuje jméno elementu, představ si ho jako proměnnou v Pythonu, protože u&nbsp;formulářu se na pozadí 
    prohlížeče ukládají data z elementu právě pod jménem.
    * **type**: Definuje typ vstupu. Implicitně je type nastaven na text. Což je klasické textové políčko. Další
     bežné možnosti jsou: (`password`, `checkbox`, `radio` a&nbsp;`submit`). Zkus si teď chvilku hrát v textovém editoru s
      typy a&nbsp;zobrazovat si je v prohlížeči.
    * **id**:  Jedná se o textový identifikátor, na který můžeme odkazovat pomocí tagu `<a>`, a&nbsp;také můžeme k
     jednotlivým
     `<input>` vkládat popisek pomocí tagů `<label>`.
    * **value**: U klikacích možností (např.: **radio** nebo **checkbox** typů) musíme připsat tento atribut, který nám určí
    jaká hodnota se uloží, když zaškrtneme tuto možnost.
    
  
* `<label> </label>`: Tag, který definuje popisek k nějakému vstupu (`<input>`). Metoda má jen dva atributy:
    * **for**: Label lze spárovat s input pokud zadáme do **for** id tagu `<input>`.
    * **form**: Definuje, ke kterému formuláři popisek (`<lable>`) patří.


* `<textarea> </textarea>`: Tag, který se hodí pro zadávání dlouhých textů. Může mít již známe atributy (name, form
a id) a&nbsp;navíc je potřeba udat velikost pole pomocí řádků a&nbsp;sloupců resp. (**rows** a&nbsp;**cols**).


* `<select> </select>`: Definuje rolovací seznam. Neměli bychom zapomenout na atribut **name**.


* `<option> </option>`: Definuje možnosti rolovacího seznamu, a&nbsp;proto má vždy nadřazený tag `<select>`.
 Tag má "povinný" atribut **value**, kterým přiřadíme hodnotu k dané možnosti, která se odešle ke zpracování.
 
 
 Uff, je to za námi. HTML samozřejmě obsahuje spoustu zákoutí a&nbsp;podivností, ale při běžné každodenní práci jsou
  formuláře nejkomplexnější oblast. Neukázali jsem si všechno, ale teď už víš jak to asi funguje.
  
  
> [note]
> Zdá se ti HTML moc "ukecané" a&nbsp;chtěla bys ho psát jako Python?
> Par chytrých hlav se dalo dohromady a&nbsp;vymyslelo **pudla** resp. **Pug** (v překladu pudl). Pug odstraňuje
> párové tagy a&nbsp;kód se strukturuje pomocí odsazení jako python. Dále odpadly známenka `<>`, tagy se píšou bez nich a
> atributy se píši do závorky. Více na https://pugjs.org/.


# Úvod do CSS
V přechozí lekci sis zkusila navrhnout webovou stránku jen pomocí HTML a&nbsp;asi jsi zjistila, že taková stránka
 vypadá dosti nevábně. Asi jako nevybarvené omalovánky. Ve světě webových stránek jsou právě Kaskádové styly (**CSS**)
  naše pastelky (**barvičky**).
  
  Špatnou zprávou je, že syntaxe **CSS** je rozdílná od HTML, takže si budeš muset v mozku vyčlenit další místo. Dobrou
   zprávou je, že i&nbsp;**CSS** jde psát jako Python (Pythonic way), ale více až na konci lekce.
    Teď se musíme naučit čísté **CSS**.
    
  Pro zopakování **CSS** znamená **Cascading Styles Sheets** (v češtině: Kaskádové styly).
  
 ## Aplikace CSS stylů
  Máte napsanou HTML stránku a&nbsp;teď si asi říkáte, musím to celé přepisovat, když chci mít růžové pozadí a&nbsp;žluté písmo?
  Opověď zní, ano můžu, ale naštěstí nemusím. Existují tři způsoby jak dodat HTML stránce grafický styl:
  
  1. **Inline**: CSS styly jsou vložené přímo v HTML tagu zadané pomocí atributu **style**.
    
    ```html
    <p style="color: red">text</p>
    ```
  Tímto zápisem říkáme, že celý text v odstavci má mít červenou barvu.

  2. **Interní CSS**: CSS styly jsou vkládáne pomocí tagu `<style> </style>` do hlavičky dokumentu `<head> </head>`:
  
    ```html
    <!DOCTYPE html>
        <html>
            <head>
                <title>CSS Example</title>
                <style>
                
                p {
                    color: red;
                }
                
                a&nbsp;{
                    color: orange;
                }
                
                </style>
            </head>
            <body>
                <p>Ahoj pyladies!<p>
                <a href="https://naucse.python.cz/">Oranžový odkaz na nauč se</a>
            </body>
        </html>
    ```
  3. **Externí CSS**: Poslední možností je uložit CSS jako externí soubor (přípona *.css). Vytvoř si soubor `styl.css`
   a&nbsp;ulož ho do stejné složky, kde máš html soubor. Do souboru vlož jen vnitřek z předchozího příkladu:
   
   `styl.css`:
   
   ```css
    p {
        color: red;
    }
    
    a {
        color: orange;
    }
  ```
 
   Nyní svému HTML musíš říct, kde má hledat soubory se stylem.:
   
   `moje_stranka.html`:
       
   ```html
    <!DOCTYPE html>
    <html lang="html">
        <head>
            <title>CSS Example</title>
            <link rel="stylesheet" href="style.css">
        </head>
        <body>
            <p>Ahoj pyladies!<p>
            <a href="https://naucse.python.cz/">Oranžový odkaz na nauč se</a>
        </body>
    </html>
   ```

   Odkaz na CSS obstaral tag `<link>`, který má dva atributy. Atribut **rel** udává vztah (relationship) mezi
   současným HTML a&nbsp;odkazovaným dokumentem. Hodnotou _stylesheet_ říkáme, že má očekávat **css** soubor.
    Atribut **href** (hypertext reference) odkazuje na umístění souboru, které může být relativní i&nbsp;absolutní. 

> [warning] Pozor!
> Je dobrou praxí style do HTML nezadávat, tak abychom oddělili struktru dokumentu **HTML** od jeho stylu **CSS**.
> Inline CSS používáme jen v případě pokud je důležité, aby byl text červený v každé šabloně.

## Syntaxe CSS
Ve zkratce se syntaxe skládá ze **selektorů**, **vlastností** a&nbsp;**hodnot**. Výhodou je, že už známe Python, takže si
 můžeme pomoci jeho syntaxí. Představ si, že selektor je **slovník**, **vlastnost** je klíč a&nbsp;hodnota je **hodnota**.
 Definicí slovníku známe, ale co s tím, co kam ukládat? Vysvětlíme si to postupně na příkladu:
 
 ```css
body {
    font-size: 14px;
    color: deeppink;
}
```

* **selektor**: Určuje, na který tag chceme aplikovat styl a&nbsp;můžeme si ho představit jako jméno proměnné slovníku. V 
příkladu je to tag **body**. 

* **vlastnost (property)**: Jak už název napovídá, říká nám kterou vlastnost daného tagu chceme měnit. V příkladu 
máme vlastnosti dvě **font-size (velikost písma)** a&nbsp;**color (barvu písma)**. Když zůstaneme u&nbsp;Pythonu, tak můžeme
 vlastnost připodobnit ke klíči slovníku.
 
* **hodnota (value)**: Hodnota je hodnota vlastnosti, je to trochu definice kruhem, ale snad je to zřejmé. Hodnotu
 stejně jako v Pythonu píšeme za dvojtečku.
 
> [warning] Pozor!
> Neberte příklad s Pythonem doslova, jednolivé páry vlastnost:hodnota se v CSS oddělují středníkem.
> Stejně tak selektor se nepřiřazuje k "slovníku" znaménkem rovná se, ale jen mezerou.


### Jednotky délky
Možná sis v předchozím příkladu všimla podivné jednotky u&nbsp;font-size **px**. *px* je jednotka pixelu. Co je to pixel?
Je to bod na tvé obrazovce, který může mít v jeden okamžik jen jednu barvu. Možná si vzpomínáš na pravěk počítačů,
 kdy obrázky vypadaly nějak takto:
{{ figure(
    img=static('heart.png'),
    alt='obrázek srdce'
) }} 

Na srdíčku jsou vidět jednotlivé čtverečky. A jeden ten čtvereček je pixel. S dnešním _Ultra HD_ rozlišením už
 jednotlivé pixely (čtverečky) neuvidíš. 

A jaké jednotky délky můžeš používat? V CSS se dělí na **absolutní** a&nbsp;**relativní**. Pojdmě si napsat seznam:

* **absolutní**:
    * **cm**: centimetr
    * **mm**: milimetr
    * **in**: palec (1in = 96px = 2.54cm)
    * **px**: pixel (1px = 1/96 palce)
    * **pt**: bod (1pt = 1/72 palce)
    * **pc**: picas (1pc = 12 pt)
    
    
* **relativní**:
    * **em**: násobek velikosti písma
    * **ex**: násobek velikosti písma na x-ové souřadnici (zřídka používané)
    * **ch**: násobek šířky znako 0 (nula)
    * **rem**: násobek velikosti písma kořenového tagu (elementu)
    * **vw**: procentní bod šířky okna prohlížeče
    * **vh**: procentní bod výšky okna prohlížeče
    * **vmin**: procentní bod menšího rozměru z okna prohlížeče
    * **vmax**: procentní bod většího rozměru z okna prohlížeče
    * **%**: procentní bod velikosti nadřazeného elementu (tagu)
    
## Barvy
Včelí medvídci ze známého večerníčku chtěli natírat svět nabílo (viz poznámka). Natírat svět jenom na bílo je nuda.
 CSS poskytuje **16&nbsp;777&nbsp;216** různých barev. A jak barvy zadávat, když jich je tolik?

> [note]
> **Nás by tak nejvíce vábilo (Bílá)**  
> Nás by tak nejvíce vábilo,  
> natírat celý svět na bílo.  
> Motýla i&nbsp;jeho larvu,  
> milujeme bílou barvu. Bílá, bílá, bílá, bílá,  
> komu by se nelíbila.  
> Bílá vrána, bílá noc,  
> bílé není nikdy moc."Čmeláci vy jste snad šílení,  
> okamžitě nechte bílení." 
>   
>-- Zdeněk Svěrák
 
Nemusíš se bát, že bys musela znát názvy všech barev. Pokud znáš anglický název barvy můžeš ho zkusit a&nbsp;pro ty jiné
barvy tu jsou číselné zápisy. Jak jinak, programátoři mají čísla rádi. Způsoby zadávání barev:

1. **Slovně**: Barvu musíš zadávat anglickým názvem. Současné prohlížeče podporují
 [140 názvů barev](https://www.w3schools.com/colors/colors_names.asp).

2. **RGB**:   RGB znamená <span style="color:red">Red</span> - <span style="color:green">Green</span> - 
<span style="color:blue">Blue</span>. To, že se dá každá barva složit kombinací
 <span style="color:red">červené</span>, <span style="color:blue">modré</span> a
 <span style="color:green">zelené</span> barvy
 si už asi někde slyšela. Podivej se na ukázku a&nbsp;hned si řekneme více:
     ```css
        p {
            color:rgb(255,255,255);
        }
        
        h1 {
            color: rgb(100%,100%,100%);
        }
    ```
  V našem příkladu jsme zadali, že všechny odstavce (**p**) budou mít bílou barvu a&nbsp;stejně tak všechny nadpisy
   (**h1**) budou mít také bílou barvu. Obsah každé složky barvy můžeme vkládat pomocí procent, to je asi z příkladu
    zřejmé a&nbsp;pochopitelné. Ale co je za číslo **255**?
    
  Teď zase zpátky k matematice. Počítače pracují na principu **nul** a&nbsp;**jedniček**. Ano, týká se to i&nbsp;webových 
  stránek. Pradávné počítače pracovali s osmibitovými procesory, což zjednodušeně znamená, že má 8 drátků, kam můžeme
   pouštět proud. Na každém drátku proud běží(1)/neběží(0). Tímto způsobem procesor umí pracovat s `2*2*2*2*2*2*2*2
    = 2^8 = 256` hodnotami. Historicky se ustanovilo, že **8 bitů** bude jeden **bajt**. A obřím skokem, počítačoví 
    inženýři prominou, se dostáváme k rgb.
     
 Matematiky a&nbsp;počítačové inženýry jsme odbyli, ale malíř by namítnul, že když smíchá
  <span style="color:red; font-weight: bold;">červenou</span>, <span style="color:green; font-weight: bold;">zelenou</span>
  a&nbsp;<span style="color:blue; font-weight: bold;">modrou</span> ve stejném poměru, tak dostane **černou**. Jak to
  , že jsme dostali bílou? Důvod je takový, že my
   nemícháme vodovky, ale světelné paprsky, které vytvářejí pixel. Takže když smícháš 
   <span style="color:red; font-weight: bold;">červené</span>,
    <span style="color:green; font-weight: bold;">zelené</span> a&nbsp;
    <span style="color:blue; font-weight: bold;">modré</span> světlo dostaneš světlo...
    <span style="color:white; background-color: black">bílé</span>. 
  
3. **Hexadecimální zápis**: Zdál se ti předchozí výklad o rgb, bitech a&nbsp;bajtech složitý. Jsi ráda, že už trošku
 chápeš dvojkovou soustavu, tak věř, že to není všechno. Proč používat dvojkovou soustavu, když můžeme používat
  soustavu šestnáctkovou (hexadecimální). Proč by to někdo dělal? Programátoři jsou líní, to je často odpověd na
   takové otázky. Výklad číselných soustav je mimo rozsah tohoto kurzu více se dozvíte na
    [wikipedii](https://cs.wikipedia.org/wiki/%C5%A0estn%C3%A1ctkov%C3%A1_soustava). A co ty barvy, jak je máme
     zapisovat?
     
     ```css
     p {
         color:rgb(255,255,255);
     }

     h1 {
         color: rgb(100%,100%,100%);
     }
     h2 {
        color: #ffffff;
     }
     ```
   
     Všechny barvy v příkladu jsou bílé. Hexadecimální zápis znovu využívá principu RGB. Znak `#` značí, že se jedna
     o hexadecimální zápis. První dvě číslice jsou <span style="color:red; font-weight: bold;">červená</span>,
     prostřední dvě číslice jsou <span style="color:green; font-weight: bold;">zelená</span> a&nbsp;poslední 
     dvě číslice jsou <span style="color:blue; font-weight: bold;">modré</span>. 
     
4. **HSL**: HSL znamená hue (barva), saturation (nasycení) a&nbsp;lightness (světlost). Hue nabývá hodnot od 0 do 360 a
 obsahuje celou barevnou škálu. Saturation a&nbsp;lightness nabývají procentuálních hodnot 0 až 100.
 
Zápis běžných barev:

* <span style="color:red; font-weight: bold;">červená</span>: color:red, color:#ff0000, color:rgb(255, 0, 0), color:hsl(0, 100%, 50%)
* <span style="color:green; font-weight: bold;">zelená</span>: color:green, color:#008000, color:rgb(0, 128, 0),
 color:hsl(0, 100%, 50%)
* <span style="color:blue; font-weight: bold;">modrá</span>: color:blue, color:#0000ff, color:rgb(0, 0, 255),
 color:hsl(0, 100%, 50%)
* <span style="color:brown; font-weight: bold;">hnědá</span>: color:brown, color:#a52a2a, color:rgb(165, 42, 42),
 color:hsl(0, 59%, 41%)
* <span style="color:black; font-weight: bold;">černá</span>: color:black, color:#000000, color:rgb(0, 0, 0),
 color:hsl(0, 0%, 0%)
* <span style="color:pink; font-weight: bold;">růžová</span>: color:pink, color:#ffc0cb, color:rgb(255, 192, 203),
 color:hsl(350, 100%, 88%)
 
> [note]
>**Color picker**  
> Teď už víš jak zapisovat barvy a&nbsp;co ty čísla a&nbsp;písmena znamenají. Nicméně dnesku už nikdo neskládá barvy pomocí 
>nějakých hodnot od oka, ale existují nástroje na výběr barev. Zkus googlit **color picker**. Samotný google má 
>aplikaci na výběr barev a&nbsp;měl by to být tvůj první výsledek vyhledávání.


**background-color**  
V příhladech ses setkala s vlastností `color`, která danému tagu říká jakou barvu má použít. Ve většině případů je to
 barva textu. Pokud chceš změnit barvu pozadí, tak použij vlastnost `background-color`:
 
```css
p {
      color:rgb(255,0,0);
      background-color: yellow;
  }
```

##Text
Když se snažíš napsat nějaký dokument v textovém procesoru, tak nejčastěji budeš formátovat samotný text (velikost, 
samotné písmo, zvýraznění textu atd.). Všechny tyto vlastnosti mají v CSS jméno a&nbsp;můžeme je libovolně konfigurovat.
Vlastnosti textu v dokumentaci CSS nalezneš pod těmito prefixy: `font-`, `text-`, `letter-`. Tady si ukážeme ty 
nejčastější:

* **font-family**: určuje samotnou sadu písma (<span style="font-family:Arial">Arial</span>,
 <span style="font-family:Verdana">Verdana</span>, <span style="font-family:Comic Sans MS;">Comic Sans MS</span>):
 ```css
    body {
        font-family: Comic Sans MS,serif;
    }
 ```
* **font-size**: velikost písma (<span style="font-size:8px">8px</span>, <span style="font-size:12px">12px</span>,
 <span style="font-size:24px">24px</span>):
  ```css
    body {
        font-size: 24px;
    }
  ```
* **font-weight**: tloušťka písma (<span style="font-weight:bold">bold</span>, <span style="font-weight:bolder">bolder
</span>, <span style="font-weight:lighter">lighter</span>):
  ```css
    body {
        font-weight: bold;
    }
  ```
  
* **font-style**: styl písma (<span style="font-style:italic">italic</span>, <span style="font-style:oblique">oblique
</span>, <span style="font-style:normal">normal</span>):
  ```css
    body {
        font-style: italic;
    }
  ```
  
* **font-variant**: označuje kapitálky (<span style="font-variant:small-caps">small-caps</span>):
  ```css
    body {
        font-variant: small-caps;
    }
  ```
  
* **text-transform**: řídí velikost písmen (malé/velké) (<span style="text-transform:uppercase">uppercase</span>,
 <span style="text-transform:lowercase">lowercase</span>, <span style="text-transform:capitalize">capitalize</span>):
  ```css
    body {
        text-transform: uppercase;
    }
  ```
  
* **text-decoration**: nadtržení, podtržení a&nbsp;přeškrtnutí (<span style="text-decoration:overline">overline</span>,
<span style="text-decoration:underline">underline</span>, <span style="text-decoration:line-through">line-through
</span>):
  ```css
    body {
        text-decoration: underline;
    }
  ```
  
* **text-align**: horizontální zarovnání textu  
    <div style="text-align:right">right</div>      
    <div style="text-align:center">center</div>
    <div style="text-align:left">left</div>
    <br>
    <div style="text-align:justify;"><span style="font-weight:bold">justify:</span> Lorem ipsum dolor sit amet,
     consectetuer adipiscing elit. Aliquam in lorem sit amet leo accumsan lacinia. Fusce nibh. Nulla est.
      Nullam at arcu a&nbsp;est sollicitudin euismod. Praesent id justo in neque elementum ultrices. Aliquam erat volutpat.
       Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
        Maecenas aliquet accumsan leo. In sem justo, commodo ut, suscipit at, pharetra vitae, orci. Nullam eget nisl.
         Aliquam id dolor. Nulla non lectus sed nisl molestie malesuada. Donec quis nibh at felis congue commodo.
          Curabitur ligula sapien, pulvinar a&nbsp;vestibulum quis, facilisis vel sapien. </div>  

    ```css
    body {
        text-align: justify;
    }
    ```
  
* **text-indent**: odsazení textu  
    <div style="text-indent:50px;"> Lorem ipsum dolor sit amet,
     consectetuer adipiscing elit. Aliquam in lorem sit amet leo accumsan lacinia. Fusce nibh. Nulla est.
      Nullam at arcu a&nbsp;est sollicitudin euismod. Praesent id justo in neque elementum ultrices. Aliquam erat volutpat.
       Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
        Maecenas aliquet accumsan leo. In sem justo, commodo ut, suscipit at, pharetra vitae, orci. Nullam eget nisl.
         Aliquam id dolor. Nulla non lectus sed nisl molestie malesuada. Donec quis nibh at felis congue commodo.
          Curabitur ligula sapien, pulvinar a&nbsp;vestibulum quis, facilisis vel sapien. </div>

    ```css
    p {
        text-indent: 50px;
    }
    ```
  
* **letter-spacing**: mezery mezi písmeny
    <div style="letter-spacing:3px;"> Lorem ipsum dolor sit amet,
     consectetuer adipiscing elit. Aliquam in lorem sit amet leo accumsan lacinia. Fusce nibh. Nulla est.
      Nullam at arcu a&nbsp;est sollicitudin euismod. Praesent id justo in neque elementum ultrices. Aliquam erat volutpat.
       Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
        Maecenas aliquet accumsan leo. In sem justo, commodo ut, suscipit at, pharetra vitae, orci. Nullam eget nisl.
         Aliquam id dolor. Nulla non lectus sed nisl molestie malesuada. Donec quis nibh at felis congue commodo.
          Curabitur ligula sapien, pulvinar a&nbsp;vestibulum quis, facilisis vel sapien. </div>

    ```css
    p {
        letter-spacing: 3px;
    }
    ```
  
* **word-spacing**: mezery mezi slovy
    <div style="word-spacing:2em;"> Lorem ipsum dolor sit amet,
     consectetuer adipiscing elit. Aliquam in lorem sit amet leo accumsan lacinia. Fusce nibh. Nulla est.
      Nullam at arcu a&nbsp;est sollicitudin euismod. Praesent id justo in neque elementum ultrices. Aliquam erat volutpat.
       Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
        Maecenas aliquet accumsan leo. In sem justo, commodo ut, suscipit at, pharetra vitae, orci. Nullam eget nisl.
         Aliquam id dolor. Nulla non lectus sed nisl molestie malesuada. Donec quis nibh at felis congue commodo.
          Curabitur ligula sapien, pulvinar a&nbsp;vestibulum quis, facilisis vel sapien. </div>

    ```css
    p {
        word-spacing:2em;
    }
    ```
  
* **line-height**: velikost řádku
    <div style="line-height:5.0;"> Lorem ipsum dolor sit amet,
     consectetuer adipiscing elit. Aliquam in lorem sit amet leo accumsan lacinia. Fusce nibh. Nulla est.
      Nullam at arcu a&nbsp;est sollicitudin euismod. Praesent id justo in neque elementum ultrices. Aliquam erat volutpat.
       Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
        Maecenas aliquet accumsan leo. In sem justo, commodo ut, suscipit at, pharetra vitae, orci. Nullam eget nisl.
         Aliquam id dolor. Nulla non lectus sed nisl molestie malesuada. Donec quis nibh at felis congue commodo.
          Curabitur ligula sapien, pulvinar a&nbsp;vestibulum quis, facilisis vel sapien. </div>

    ```css
    p {
        line-height: 5.0;
    }
    ```
  
## Krabicový model - okraje
Krabicový model? To je zase co? CSS nahlíží na každý element jako na krabici (v originále **box model**). Zde bych
 upozornil, že ve skutečnosti jsou to obdelníky - pořad jsme v 2D prostory, které jsou definované okolo každého
  elementu. S vystvětlením nám pomůže obrázek.
  
![krabicový-model](static/css_box_model_chrome.png)  
  
Co jednotlivé podjmy znamenají?:
* **padding**: vnitřní okraj k ohraničení (border)
* **border**: ohraničení
* **margin**: vnější okraj

Na příkladu to může vypadat takto:
```html
<!DOCTYPE html>
<html>
    <head>
        <title>Page Title</title>
        <style>
            h1 {
                    font-size: 1.5em;
                    background-color: #cccccc;
                    margin: 20px;
                    padding: 40px;
                    border: 5px solid red;
                }
        </style>
    </head>
    <body>

        <h1>Nadpis</h1>
        <p>Odstavec</p>

    </body>
</html>
```
`margin` a&nbsp;`padding` se zadávají delkovými jednotkami. `border` je vlastnost, která spojuje tři vlastnosti dohromady
 `border-width`, `border-style` a&nbsp;`border-color`. Hodnoty pro `border-style` jsou: _solid, dotted, dashed, double
 , groove, ridge, inset, outset._
 
## Vše dohromady
`moje_stranka.html`
```html
<!DOCTYPE html>

<html>

<head>

	<title>Moje první webová stránka</title>
    <link href="styly.css" rel="stylesheet">

	<!-- Syntaxe komentáře v HTML -->

</head>

<body>

	<h1>Moje první webová stránka</h1>

	<h2>Nadpis 2</h2>
	<p>
		Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam ornare wisi eu metus. Ut enim ad minim veniam,
		quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis bibendum, lectus ut
		viverra rhoncus, dolor nunc faucibus libero, eget facilisis enim ipsum id lacus. In enim a&nbsp;arcu imperdiet
		malesuada. Itaque earum rerum hic tenetur a&nbsp;sapiente delectus, ut aut reiciendis voluptatibus maiores alias
		consequatur aut perferendis doloribus asperiores repellat. Nulla pulvinar eleifend sem. Integer pellentesque
		quam vel velit. Fusce nibh. Fusce tellus. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil
		impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus.
		Fusce tellus. Nulla pulvinar eleifend sem. Mauris tincidunt sem sed arcu. Nullam faucibus mi quis velit.
	</p>
	<p>
		Et harum quidem rerum facilis est et expedita distinctio. Nunc tincidunt ante vitae massa. Etiam neque. Etiam
		dui sem, fermentum vitae, sagittis id, malesuada in, quam. Nunc auctor. Fusce wisi. Etiam dui sem, fermentum
		vitae, sagittis id, malesuada in, quam. Aenean placerat. Nullam rhoncus aliquam metus. Class aptent taciti
		sociosqu ad litora torquent per conubia nostra, per inceptos hymenaeos. Nulla turpis magna, cursus sit amet,
		suscipit a, interdum id, felis. Pellentesque sapien. Morbi scelerisque luctus velit. Fusce tellus. Donec vitae
		arcu. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.
	</p>
	<p>
		Nullam eget nisl. <em>Mauris suscipit</em>, ligula sit amet pharetra semper, nibh ante cursus purus, vel
		sagittis velit
		mauris vel metus. Mauris dolor felis, sagittis at, luctus sed, aliquam non, tellus. Mauris tincidunt sem sed
		arcu. Etiam commodo dui eget wisi. Maecenas fermentum, sem in pharetra pellentesque, <strong>turpis </strong>
		volutpat ante,
		in pharetra metus odio a&nbsp;lectus. Vestibulum fermentum tortor id mi. Etiam dui sem, fermentum vitae, sagittis id,
		malesuada in, quam. Aliquam erat volutpat. Etiam quis quam. Fusce dui leo, imperdiet in, aliquam sit amet,
		feugiat eu, orci. Pellentesque pretium lectus id turpis. Etiam ligula pede, sagittis quis, interdum ultricies,
		scelerisque eu. Duis bibendum, lectus ut viverra rhoncus, dolor nunc faucibus libero, eget facilisis enim ipsum
		id lacus. Sed convallis magna eu sem. Nullam dapibus fermentum ipsum. Duis risus. Duis pulvinar. Morbi
		scelerisque luctus velit. Etiam posuere lacus quis dolor.
	</p>

	<h2>Úkoly tohoto kurzu</h2>
	<ul>
		<li>Naučit se HTML, CSS a&nbsp;pokročilé knihovny <strong
				style="color:#3e7bac; background-color: #ffe56b;">Pythonu</strong></li>
		<li>
			Výpis některých knihoven:
			<ol>
				<li>Request</li>
				<li>Click</li>
				<li>Flask</li>
				<li>SQLAlchemy</li>
			</ol>
		</li>
		<li>Potěši se z nových znalostí</li>
	</ul>

	<h2>Kde najdu informace o kurzu</h2>
	<p><a href="https://naucse.python.cz/2020/praha-jaro-knihovny/"><img
				src="https://pyladies.cz/static/img/pyladies.png"
				width="300" alt="PyLadies logo"></a></p>

	<h3>Tabulka</h3>
	<table>
		<tr>
			<th>Sloupec 1</th>
			<th>Sloupec 2</th>
			<th>Sloupec 3</th>
		</tr>
		<tr>
			<td>řádek 1, buňka 1</td>
			<td>řádek 1, buňka 2</td>
			<td>řádek 1, buňka 3</td>
		</tr>
		<tr>
			<td>řádek 2, buňka 1</td>
			<td>řádek 2, buňka 2</td>
			<td>řádek 2, buňka 3</td>
		</tr>
		<tr>
			<td>řádek 3, buňka 1</td>
			<td>řádek 3, buňka 2</td>
			<td>řádek 3, buňka 3</td>
		</tr>
		<tr>
			<td>řádek 4, buňka 1</td>
			<td>řádek 4, buňka 2</td>
			<td>řádek 4, buňka 3</td>
		</tr>
	</table>

	<h3>Formulář</h3>
	<p><strong>Note:</strong> It looks the part, but won't do a&nbsp;damned thing.</p>

	<form action="" method="post">
		<p>Celí jméno:</p>
		<p>
			<input name="name" value="Tvoje jméno">
		</p>

		<label for="fname">Křestní jméno:</label>
		<input type="text" id="fname" name="fname">
		
		<label for="lname">Přijmení: </label>
		<input type="text" id="lname" name="lname">

		<p>Komentář: </p>
		<p>
			<textarea rows="10" cols="20" name="comments">Tvůj komentář</textarea>
		</p>

		<p>Tvoje pohlaví:</p>
		<p>
			<input type="radio" name="sex" value="female"> žena
		</p>
		<p>
			<input type="radio" name="sex" value="male"> muž
		</p>

		<select name="language">
			<option>Python</option>
			<option>JavaScript</option>
			<option>C</option>
		</select>

		<p>
			<input type="submit" value="odeslat">
		</p>
	</form>

</body>

</html>
```
`styly.css`
```css
body {
    font-family: arial, helvetica, sans-serif;
    font-size: 14px;
    color: black;
    background-color: #ffc;
    margin: 20px;
    padding: 0;
}

/* Komentář v CSS */

p {
    line-height: 21px;
}

h1 {
    color: #ffc;
    background-color: #900;
    font-size: 2em;
    margin: 0;
    margin-bottom: 7px;
    padding: 4px;
    font-style: italic;
    text-align: center;
    letter-spacing: 0.5em;
    border-bottom-style: solid;
    border-bottom-width: 0.5em;
    border-bottom-color: #c00;
}

h2 {
    color: white;
    background-color: #090;
    font-size: 1.5em;
    margin: 0;
    padding: 2px;
    padding-left: 14px;
}

h3 {
    color: #999;
    font-size: 1.25em;
}

img {
    border-style: dashed;
    border-width: 2px;
    border-color: #cccccc;
}

a {
    text-decoration: none;
}

strong {
    font-style: italic;
    text-transform: uppercase;
}

li {
    color: #990000;
    font-style: italic;
}

table {
    background-color: #ccc;
}

em {
    color: deeppink
}
```

## Závěr
V této hodině jsme nechtěli a&nbsp;ani nemohli obsáhnout všechny aspekty a&nbsp;zákoutí HTML a&nbsp;CSS a&nbsp;už vůbec ne celého
 webového vývoje. Cílem bylo seznámit tě s principy, které teď už ovládáš a&nbsp;můžeš se pokročilá témata sama doučit.
 Složité webové stránky se neobejdou bez JavaScriptu a&nbsp;serveru (backendu). Nicméně osobní webovou prezentaci si
  dokážeš udělat právě jenom s&nbsp;HTML a&nbsp;CSS. Na začátku jsem sliboval, že ti úkážu jak zapisovat syntaxi CSS jednodušeji
  tzv. **pythonic way**. Zkus se podívat na CSS preprocesor [Stylus](http://stylus-lang.com/).
  
Spoustu užitečných informací o webovým vývoji nalezneš na stránkách [w3school.com](https://www.w3schools.com/)
   případně [mozilla developer](https://developer.mozilla.org/).
   
Na stránkách w3school nalezneš i&nbsp;sekci [How To](https://www.w3schools.com/howto/default.asp) (jak na to), kde je
   obrovská databáze veškerých webových "vychytávek".
   
Pokud to myslíš s tvorbou webových stránek vážně, tak je potřeba se naučit JavaScript a&nbsp;nějaký framework. Velmi
populární pro začátek je framework [Bootstrap](https://getbootstrap.com/), který pochází od vývojářů twitteru.
W3school vyvíjí vlastní framework [W3.CSS](https://www.w3schools.com/w3css/), který je pro začátek asi nejlepší volbou.

A pak jsou tady "_těžké váhy_" frontend frameworků, které stojí hlavně na JavaScriptu:
* [React](https://reactjs.org/)
* [Angular](https://angular.io/)
* [Vue.js](https://vuejs.org/)

Pro začátečníky se doporučuje **React** nebo **Vue**. **React** má nejširší základnu uživatelů, **Vue** je pro člověka,
 který v JS nemá pevné základy, jednodušší. Angular je momentálně na ústupu z důvodu jeho komplexnosti.
  
